// Стандартная преамбула для заголовочного файла, гарантирующая его однократное
// включение
#ifndef __new_h
#define __new_h

// Нужно для size_t (беззнаковое целое с размером, соответствующим разрядности
// архитектуры)
#include <stddef.h>

// Нужно для va_list (тип, на котором основывается работа с переменным
// количеством аргументов у функций)
#include <stdarg.h>

/*
 * Базовая структура, в которой хранится информация о классе. Не путать со
 * структурой объекта! Для каждого класса существует одна-единственная глобальная
 * переменная типа Class.
 */
struct Class {
    // Размер объекта описываемого класса в байтах
    size_t size;

    void *(*ctor)(void *self, va_list *app);

    void *(*dtor)(void *self);

    void (*draw)(const void *self);
};

// Функция создания объекта. Первый аргумент — указатель на структуру-описание
// класса (типа Class). Прочие аргументы будут переданы конструктору (ctor).
// Функция возвращает указатель на созданный и проинициализированный объект.
void *new(const void *class, ...);

// Функция уничтожения объекта. Аргумент item — указатель на объект
// (который был ранее возвращен функцией new). Перед освобождением памяти
// вызывает деструктор dtor (при его наличии).
void delete(void *item);

// Виртуальная функция draw. Аргумент self — указатель на объект. В зависимости от
// класса объекта будет вызвана соответствующая реализация draw.
void draw(const void *self);

#endif